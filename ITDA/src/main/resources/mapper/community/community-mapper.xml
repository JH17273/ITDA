<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="community">
	<!-- 커뮤니티 타입 목록 -->
	<select id="getCommunityTypeMap" resultType="CommunityType">
		SELECT COMMUNITY_CD AS "communityCd", COMMUNITY_NAME AS communityName
		FROM COMMUNITY_TYPE
	</select>

	<!-- 게시글 수 조회 -->
	<select id="selectListCount" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM BOARD_COMMUNITY C
		LEFT JOIN USER_TB U	USING(USER_NUM)
		<where>
		<if test="keyword != null and keyword != '' ">
			AND
			<choose>
				<when test="condition.equals('title')">
					C.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('writer')">
					U.NICK_NAME LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('content')">
					C.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('titleAndContent')">
					(C.TITLE LIKE '%' || #{keyword} || '%' OR
					C.CONTENT
					LIKE '%' || #{keyword} || '%' )
				</when>
			</choose>

		</if>
		</where>
	</select>


	<!-- 게시글 목록 조회 -->
	<select id="selectList" parameterType="map"
		resultType="community">
		SELECT 
			C.COMMUNITY_BOARD_ID AS communityNo, 
			C.TITLE AS communityTitle, 
			U.NICK_NAME AS communityNickname,
			C.WRITE_DATE AS writeDate, 
			C.VIEWS AS views,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'LIKE'
			) AS recommendCount
		FROM BOARD_COMMUNITY C
		LEFT JOIN USER_TB U USING(USER_NUM)
		<where>
		<if test="keyword != null and keyword != '' ">
			AND
			<choose>
				<when test="condition.equals('title')">
					C.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('writer')">
					U.NICK_NAME LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('content')">
					C.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
				<when test="condition.equals('titleAndContent')">
					(C.TITLE LIKE '%' || #{keyword} || '%' OR
					C.CONTENT
					LIKE '%' || #{keyword} || '%' )
				</when>
			</choose>
		</if>
		</where>
		ORDER BY COMMUNITY_BOARD_ID DESC
		OFFSET #{offset} ROWS FETCH NEXT
		#{limit} ROWS ONLY
	</select>
	
	
	<!--  좋아요기능 -->
	<select id="selectCommunityLikeCount" parameterType="int" resultType="int">
	    SELECT COUNT(*) FROM REACTION
	    WHERE TARGET_TYPE = 'community'
	      AND TARGET_ID = #{targetId}
	      AND REACTION_TYPE = 'like'
	</select>
		

	<!-- 게시글 등록 -->
	<insert id="insertCommunity" parameterType="com.kh.itda.community.model.vo.Community">
		<!-- selectKey - INSERT 전/후에 실행되어 게시글 번호와 같은 자동증가값을 가져오는 구문 - keyProperty 
			: 결과값을 저장할 필드명 - resultType : 반환되는 타입의 자료형 - order : insert 전에 실행될지 후에 실행될지를 
			지정하는 속성 - 같은 트랜잭션에서 현재 테이블의 PK값이 필요한 경우 사용 -->
		<selectKey keyProperty="communityNo" resultType="int" order="BEFORE">
			SELECT BOARD_COMMUNITY_SEQ.NEXTVAL
			FROM DUAL
		</selectKey>
		INSERT INTO BOARD_COMMUNITY (COMMUNITY_BOARD_ID, USER_NUM, TITLE, CONTENT, COMMUNITY_CD)
		VALUES (#{communityNo},#{communityWriter}, #{communityTitle}, #{communityContent}, #{communityCd})
		<!-- 그니까 여기에서 DB값을 가져오고 저장시키고하는곳
		쿼리문으로 어떤칼럼에 내가적은 #{}을 넣겠다,
		혹은, 쿼리문으로 테이블의 값#{}을 ${}으로 controller혹은 jsp에서 뽑아쓰겠다!-->
	</insert>

	<!-- 게시글 첨부 이미지 등록 --><!-- 순서 주의 필요 =============오류시 확인해보셈============ -->
	<!-- 다중 인서트문 - mybatis의 fore -->
	<insert id="insertCommunityImgList" parameterType="communityImg">
		INSERT INTO COMMUNITY_IMG (COMMUNITY_IMG_NO, ORIGIN_NAME,
		CHANGE_NAME,REF_CNO, IMG_LEVEL)
		SELECT SEQ_IMG_NO.NEXTVAL, C.*
		FROM (
		<foreach collection="list" item="ci" separator="UNION ALL">
			SELECT #{ci.originName}, #{ci.changeName},#{ci.refCno}, #{ci.imgLevel}
			FROM DUAL
		</foreach>
		)C
	</insert>

	<!-- 특정 게시글 번호에 해당하는 게시글 정보를 조회할 때 사용 -->
	 <select id="selectCommunity" resultMap="communityExtResultMap">
		SELECT
			C.COMMUNITY_BOARD_ID AS communityNo,
			C.TITLE AS communityTitle,
			C.CONTENT AS communityContent,
			C.USER_NUM AS communityWriter,
			U.NICK_NAME AS communityNickname,
			C.WRITE_DATE AS writeDate,
			T.COMMUNITY_NAME AS communityCdName,
			C.VIEWS AS views,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'LIKE'
			) AS recommendCount,
			(
				SELECT COUNT(*)
				FROM REACTION R
				WHERE R.TARGET_ID = C.COMMUNITY_BOARD_ID
				AND R.REACTION_TYPE = 'DISLIKE'
			) AS recommendDiscount,
			(
				SELECT COUNT(*)
				FROM BOARD_COMMENT T
				WHERE T.BOARD_ASSORTMENT = 5
					AND REF_NO = C.COMMUNITY_BOARD_ID
			) AS commentCount
			
		FROM BOARD_COMMUNITY c
			LEFT JOIN USER_TB U ON C.USER_NUM=U.USER_NUM
			LEFT JOIN COMMUNITY_TYPE T ON C.COMMUNITY_CD = T.COMMUNITY_CD
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</select> 

	<!-- selectBoard 쿼리 결과를 매핑하기 위한 resultMap 정의BOARDWRITER을 USER_NUM으로 바꿈
	게시글 정보와 함께 이미지 리스트(imgList)를 selectBoardImgList 쿼리로 가져와 매핑 -->
	 <resultMap type="communityExt" id="communityExtResultMap">
  <id column="communityNo" property="communityNo" />
  <result column="communityTitle" property="communityTitle" />
  <result column="communityWriter" property="communityWriter" />
  <result column="communityContent" property="communityContent" />
  <result column="writeDate" property="writeDate" />
  <result column="communityNickname" property="communityNickname" />
  <collection property="imgList" javaType="java.util.List" ofType="communityImg"
    select="selectCommunityImgList" column="COMMUNITY_BOARD_ID" />
</resultMap>


	<!-- 게시글 번호에 해당하는 첨부 이미지 리스트를 조회하는 쿼리 -->
	<!-- 이미지 순서대로(IMG_LEVEL 기준) 정렬하여 가져옴 -->
	<select id="selectCommunityImgList" resultType="communityImg">
		SELECT *
		FROM COMMUNITY_IMG
		WHERE REF_CNO = #{communityNo}
		ORDER BY IMG_LEVEL
	</select>

	<!-- 게시글 조회수(Count)를 1 증가시키는 쿼리 -->
	<update id="increaseCount">
		UPDATE BOARD_COMMUNITY 
		SET	VIEWS = VIEWS + 1
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</update>

<!-- 아직안쓰는 부분 수정 쿼리-->
	<!-- 게시글 제목과 내용을 수정할 때 사용하는 쿼리 -->
	<update id="updateCommunity">
		UPDATE COMMUNITY SET
		TITLE = #{communityTitle},
		CONTENT = #{communityContent}
		WHERE COMMUNITY_BOARD_ID = #{communityNo}
	</update>
	<!-- 첨부 이미지의 원본 이름과 변경 이름을 수정할 때 사용하는 쿼리 -->
	<update id="updateCommunityImg">
		UPDATE COMMUNITY_IMG SET
		ORIGIN_NAME = #{originName},
		CHANGE_NAME = #{changeName}
		WHERE COMMUNITY_IMG_NO = #{communityImgNo}
	</update>

	<!-- 게시글 첨부 이미지 한 건을 등록할 때 사용하는 INSERT 구문 -->
	<!-- 단일 이미지 등록용 -->
	<insert id="insertCommunityImg">
		INSERT INTO COMMUNITY_IMG
		VALUES(
		SEQ_IMG_NO.NEXTVAL,
		#{originName},
		#{changeName},
		#{refCno},
		#{imgLevel}
		)
	</insert>

	<!-- 게시글 첨부 이미지 여러 건을 삭제할 때 사용하는 쿼리 -->	<!-- 전체삭젲의 위험 -->
	<!-- deleteList 변수에 이미지 번호들을 넣어 삭제 처리 -->
	<delete id="deleteCommunityImg">
		DELETE FROM COMMUNITY_IMG
		WHERE COMMUNITY_IMG_NO IN (${deleteList})
		<!-- ${1234} : (1234) 직접 치환되어 사용 #{1234} : ('1234') 바인딩 변수로 사용 -->
	</delete>
	<!-- =========================오류나면 바꿔
	<delete id="deleteCommunityImg">
	DELETE FROM COMMUNITY_IMG
	WHERE COMMUNITY_IMG_NO IN
	<foreach collection="deleteList" item="imgNo" open="(" separator="," close=")">
		#{imgNo}
	</foreach>
</delete> -->
	

	<!-- 게시글 첨부 이미지의 변경된 파일 이름들만 모두 조회할 때 사용 -->
	<select id="selectFileList" resultType="string">
		SELECT CHANGE_NAME
		FROM COMMUNITY_IMG
	</select>

	<!-- 게시글 유형 리스트를 조회할 때 사용하는 쿼리 -->
	<!-- 게시판 구분 등 게시글 타입 관련 데이터를 가져옴 -->
	<select id="selectCommunityTypeList" resultType="communityType">
		SELECT *
		FROM COMMUNITY_TYPE
	</select>
	
	
	<!-- 좋아요/싫어요 -->
	<!-- 유저가 해당 글에 반응한 내역 조회 -->
<select id="selectUserReaction" resultType="communityReaction">
    SELECT 
    	REACTION_NUM as reactionNo,
        REACTION_USER_NUM as userNo,
        REACTION_TYPE as type
    FROM REACTION 
    WHERE REACTION_USER_NUM = #{userNo} 
      AND TARGET_ID = #{communityNo}
      AND TARGET_TYPE = 'CONTENT'
</select>

<!-- 반응 INSERT -->
<insert id="insertReaction" parameterType="communityReaction">
    INSERT INTO REACTION (
        REACTION_NUM, REACTION_USER_NUM, TARGET_TYPE, TARGET_ID, REACTION_TYPE
    ) VALUES (
        REACTION_SEQ.NEXTVAL,
        #{userNo},
        'CONTENT',
        #{communityNo},
        #{type}
    )
</insert>

<!-- 반응 수정 -->
<update id="updateReaction" parameterType="communityReaction">
    UPDATE REACTION
    SET REACTION_TYPE = #{type}
    WHERE REACTION_USER_NUM = #{userNo}
      AND TARGET_ID = #{communityNo}
       AND TARGET_TYPE = 'CONTENT'
</update>

<!-- 반응 삭제 -->
<delete id="deleteReaction" parameterType="communityReaction">
    DELETE FROM REACTION
    WHERE REACTION_USER_NUM = #{userNo}
      AND TARGET_ID = #{communityNo}
       AND TARGET_TYPE = 'CONTENT'
</delete>

<!-- 좋아요 개수 -->
<select id="getLikeCount" resultType="int">
    SELECT COUNT(*) 
    FROM REACTION 
    WHERE TARGET_ID = #{communityNo}
      AND REACTION_TYPE = 'LIKE'
</select>

<!-- 싫어요 개수 -->
<select id="getDislikeCount" resultType="int">
    SELECT COUNT(*) 
    FROM REACTION 
    WHERE TARGET_ID = #{communityNo}
      AND REACTION_TYPE = 'DISLIKE'
</select>





</mapper>