<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DB연결 설정 -->
	<!-- 카카오 api 사용할려면 sevlet,root-contxt.xml에도 있어야 되더라구요 이거 맞습니다 -->
	<context:property-placeholder
		location="classpath:driver.properties,classpath:kakaoapi.properties"
		ignore-unresolvable="true" file-encoding="UTF-8" />
	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer" />
	<!-- 1단계 DB연결 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${datasource.driver}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	<!-- 2단계 MyBatis Spring 을 활용하여 SqlSessionFactory생성 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSessionFactory">
		<!-- mybatis설정 파일 위치 지정 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath:mapper/**/*.xml" />
	</bean>
	<!-- 3단계 SqlsessionTemplate을 제공하는 bean 등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession">
		<constructor-arg ref="sqlSessionFactory" />
		<!-- gpt가 추가하라함 -->
		<!-- <property name="typeAliasesPackage" value="com.kh.community.model"/> -->
	</bean>
	<!-- transactionManger - 데이터베이스 트랜잭션 처리를 담당하는 bean객체 - jdbc를 통해 커넥션을 얻어
		온 후, 트랜잭션을 시작/커밋/롤백 처리를 담당 - @Transactional어노테이션을 통해 트랜잭션을 선언적으로 처리 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<websocket:message-broker application-destination-prefix="/app">
		<websocket:stomp-endpoint path="/stomp">
			<websocket:sockjs />
		</websocket:stomp-endpoint>
		<websocket:simple-broker prefix="/topic"/>
	</websocket:message-broker>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- maxUploadSize : 업로드 되는 전체 파일의 크기 제한 설정(바이트) maxInMemorySize : 업로드
			처리시 디스크에 파일을 생성하기전, 메모리에 보관할 파일의 최대 크기. 업로드한 파일의 크기가 inMemorySize보다 큰 경우
			파일을 디스크에 임시 보관한다. -->
		<property name="maxUploadSize" value="10000000"></property>
		<property name="maxInMemorySize" value="2000000"></property>
	</bean>
</beans>